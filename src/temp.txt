function toDegrees(radians) {return radians * (180 / Math.PI);}

    function get_Moon_height(currDate, latitude, longitude) {
        const moon = SunCalc.getMoonPosition(currDate, latitude, longitude);
        return toDegrees(moon.altitude);
    }

    function get_prev_rise(set_time){
        let height = -1;
        let time = set_time - 1000*60;
        while(height < 0){
            time -= 1000*60;
            height = get_Moon_height(time);
        }
        return time;
    }

    function get_prev_set(rise_time) {
        let height = 1;
        let time = rise_time - 1000*60;
        while(height > 0){
            time -= 1000*60;
            height = get_Moon_height(time);
        }
        return time;
    }

    function get_Moon_x(curr_time, current_height, width, data_about_Moon) {
        if (current_height > 0){
            const delta_between_rises_sets = data_about_Moon[1] - get_prev_rise(data_about_Moon[1]);
            const speed = delta_between_rises_sets / (width / 2);
            return curr_time * speed;
        } else if (current_height < 0){
            const delta_between_sets_rises = data_about_Moon[0] - get_prev_set(data_about_Moon[0]);
            const speed = delta_between_sets_rises / (width / 2);
            return curr_time * speed;
        }

        return 0;
    }

    function convert_Moon_height(current_height) {
        return 0;
    }

    function when_rises_sets(currDate, latitude, longitude) {
        const currHeight = get_Moon_height(currDate, latitude, longitude);
        let prev_Time = currDate.getTime();
        let prev_Height = currHeight;
        let next_Time = 0;
        let next_Height = 0;
        // List where first el is time when Moon rises second when sets and third when maximal
        let when_rises_sets_max = [0, 0, 0, 0];
        let max_height = 0;
        let max_time = 0;
        let min_height = 0;
        let min_time = 0;

        for (let i = 1; i < 1440; i++){
            next_Time = prev_Time + (60 * 1000);
            next_Height = get_Moon_height(next_Time, latitude, longitude);

            if (prev_Height < 0 && next_Height > 0){
                when_rises_sets_max[0] = next_Time;
            } else if (prev_Height > 0 && next_Height < 0){
                when_rises_sets_max[1] = next_Time;
            } else if (max_height < next_Height){
                max_height = next_Height;
                max_time = next_Time;
            } else if (min_height > next_Height){
                min_height = next_Height;
                min_time = next_Time;
            }
            prev_Time = next_Time;
            prev_Height = next_Height;
        }
        when_rises_sets_max[2] = max_time;
        when_rises_sets_max[3] = min_time;
        return when_rises_sets_max;
    }

    const canv = document.getElementById('myCanvas');
    const container = document.getElementById('output');
    const ctx = canv.getContext('2d');

    canv.width = container.offsetWidth;
    canv.height = container.offsetHeight;

    const current_time = new Date();
    const current_height = get_Moon_height(current_time, 50.444131, 30.594092);
    const data_list = when_rises_sets(current_time, 50.444131, 30.594092);
    const sets_time = new Date(data_list[1]).getHours().toString()+':'+new Date(data_list[1]).getMinutes().toString();
    const rises_time = new Date(data_list[0]).getHours().toString()+':'+new Date(data_list[0]).getMinutes().toString();

    ctx.fillStyle = '#19193B';
    ctx.fillRect(0, 0, canv.width, canv.height);

    // Малюємо лінію
    ctx.strokeStyle = 'blue';
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(0, canv.offsetHeight - 60);
    ctx.lineTo(canv.offsetWidth, canv.offsetHeight - 60);
    ctx.stroke();

    if (current_height > 0) {
        // Малюємо криву
        ctx.strokeStyle = 'red';
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.moveTo(40, canv.offsetHeight - 60);
        ctx.quadraticCurveTo(canv.offsetWidth / 4, 60, canv.offsetWidth / 2, canv.offsetHeight - 60);
        ctx.stroke();

        // Малюємо другу криву
        ctx.strokeStyle = 'red';
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.moveTo(canv.offsetWidth / 2, canv.offsetHeight - 60);
        ctx.quadraticCurveTo((3 * canv.offsetWidth) / 4, canv.offsetHeight+20, canv.offsetWidth - 40, canv.offsetHeight - 60);
        ctx.stroke();

        // Пишемо текст
        ctx.font = '16px Arial';
        ctx.fillStyle = '#FFFEFF';
        ctx.fillText('sets:', 50, 50);
        ctx.fillText(sets_time, 50, 70);
        ctx.fillText('rises:', canv.offsetWidth - 50, 50);
        ctx.fillText(rises_time, canv.offsetWidth - 50, 70);

        //Малюєм Місяць
        const image = new Image();
        image.src = 'img/Moons/aging_Moon.png';

        image.onload = function () {
            ctx.drawImage(image,
                get_Moon_x(current_time.getTime(), current_height, canv.width, data_list),
                convert_Moon_height(current_height), canv.offsetWidth / 15, canv.offsetWidth / 15);
        };
    } else if (current_height < 0) {
        // Малюємо криву
        ctx.strokeStyle = 'red';
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.moveTo(40, canv.offsetHeight - 60);
        ctx.quadraticCurveTo(canv.offsetWidth / 4, canv.offsetHeight+20, canv.offsetWidth / 2, canv.offsetHeight - 60);
        ctx.stroke();

        // Малюємо другу криву
        ctx.strokeStyle = 'red';
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.moveTo(canv.offsetWidth / 2, canv.offsetHeight - 60);
        ctx.quadraticCurveTo((3 * canv.offsetWidth) / 4, 60, canv.offsetWidth - 40, canv.offsetHeight - 60);
        ctx.stroke();

        // Пишемо текст
        ctx.font = '16px Arial';
        ctx.fillStyle = '#FFFEFF';
        ctx.fillText('rises:', 50, 50);
        ctx.fillText(rises_time, 50, 70);
        ctx.fillText('sets:', canv.offsetWidth - 50, 50);
        ctx.fillText(sets_time, canv.offsetWidth - 50, 70);
    }

    function when_rises_sets(currDate, latitude, longitude) {
        const currHeight = get_Moon_height(currDate, latitude, longitude);
        let prev_Time = currDate.getTime();
        let prev_Height = currHeight;
        let next_Time = 0;
        let next_Height = 0;
        // List where first el is time when Moon rises second when sets and third when maximal
        let when_rises_sets_max = [0, 0, 0, 0];
        let max_height = 0;
        let max_time = 0;
        let min_height = 0;
        let min_time = 0;

        for (let i = 1; i < 1440; i++){
            next_Time = prev_Time + (60 * 1000);
            next_Height = get_Moon_height(next_Time, latitude, longitude);

            if (prev_Height < 0 && next_Height > 0){
                when_rises_sets_max[0] = next_Time;
            } else if (prev_Height > 0 && next_Height < 0){
                when_rises_sets_max[1] = next_Time;
            } else if (max_height < next_Height){
                max_height = next_Height;
                max_time = next_Time;
            } else if (min_height > next_Height){
                min_height = next_Height;
                min_time = next_Time;
            }
            prev_Time = next_Time;
            prev_Height = next_Height;
        }
        when_rises_sets_max[2] = max_time;
        when_rises_sets_max[3] = min_time;
        return when_rises_sets_max;
    }

    function get_prev_rise(set_time){
        let height = -1;
        let time = set_time - 1000*60;
        while(height < 0){
            time -= 1000*60;
            height = get_Moon_height(time);
        }
        return time;
    }

    function get_prev_set(rise_time) {
        let height = 1;
        let time = rise_time - 1000*60;
        while(height > 0){
            time -= 1000*60;
            height = get_Moon_height(time, lat, lon);
        }
        return time;
    }

    function get_Moon_x(curr_time, current_height, width, data_about_Moon) {
        console.log('Time '+curr_time);
        console.log('Height '+current_height);
        console.log('Width '+width);
        console.log('Data '+data_about_Moon);
        if (current_height > 0){
            const prev_rise_time = get_prev_rise(data_about_Moon[1])
            console.log('prev_rise_time '+prev_rise_time);
            const delta_between_rises_sets = data_about_Moon[1] - prev_rise_time;
            console.log('delta_between_rises_sets '+delta_between_rises_sets);
            const speed = (width / 2) / delta_between_rises_sets;
            console.log('speed '+speed);
            return (curr_time-prev_rise_time) * speed;
        } else if (current_height < 0){
            const delta_between_sets_rises = data_about_Moon[0] - get_prev_set(data_about_Moon[0]);
            const speed = delta_between_sets_rises / (width / 2);
            return curr_time * speed;
        }
    }
---------------------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Chart.js Example</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="libs/suncalc3/suncalc.js"></script>
</head>
<body>
<div style="height: 200px; width: 300px">
        <canvas id="myChart" style="height: 100%; width: 100%"></canvas>
</div>

<script>
    function toDegrees(radians) {
        return radians * (180 / Math.PI);
    }

    function get_Moon_height(currDate, latitude, longitude) {
        const moon = SunCalc.getMoonPosition(currDate, latitude, longitude);
        return toDegrees(moon.altitude);
    }

    function when_sets_rises(currDate, latitude, longitude) {
        const currHeight = get_Moon_height(currDate, latitude, longitude);
        let prev_Time = currDate.getTime();
        let prev_Height = currHeight;
        let next_Time = 0;
        let next_Height = 0;
        let List_for_x = [];
        let List_for_y = [];
        // List where first el is time when Moon rises second when sets and third when maximal
        let when_rises_sets_max = [0, 0, 0, 0]
        let max_height = 0;
        let max_time = 0;

        for (let i = 1; i < 1440; i++){
            next_Time = prev_Time + (60 * 1000);
            next_Height = get_Moon_height(next_Time, latitude, longitude);
            List_for_x.push(next_Time);
            List_for_y.push(next_Height);

            if (prev_Height < 0 && next_Height > 0){
                when_rises_sets_max[0] = next_Time;
            } else if (prev_Height > 0 && next_Height < 0){
                when_rises_sets_max[1] = next_Time;
            }
            if (max_height < next_Height){
                max_height = next_Height;
                max_time = next_Time;
            }
            prev_Time = next_Time;
            prev_Height = next_Height;
        }
        when_rises_sets_max[2] = max_time;
        return [List_for_x, List_for_y];
    }

    let x = when_sets_rises(new Date(), 50.444131, 30.594092)[0];
    let y = when_sets_rises(new Date(), 50.444131, 30.594092)[1];
    let y0_chart = [];
    let moon_chart = [];
    for (let i = 0; i < x.length; i++) {
        y0_chart.push(0);
        moon_chart.push(NaN);
    }
    moon_chart[1] = y[1];

    // Отримати посилання на <canvas> елемент
    const chart = document.getElementById('myChart');
    chart.width = 300;
    chart.height = 200;
    chart.style.backgroundColor = '#19193B';
    const ctx = chart.getContext('2d');


    // Створити новий графік
    const myChart = new Chart(ctx, {
        type: 'line', // Тип графіка (лінія)
        data: {
            labels: x, // Мітки по осі X
            datasets: [{
                data: y, // Значення по осі Y
                backgroundColor: 'rgba(0, 123, 255, 0.5)', // Колір заливки графіка
                borderColor: 'rgba(0, 123, 255, 1)', // Колір меж графіка
                borderWidth: 1,
                pointRadius: 1
            },{
                data: y0_chart,
                backgroundColor: 'rgba(255, 0, 0, 0.5)',
                borderColor: 'rgba(255, 0, 0, 1)',
                borderWidth: 1,
                pointRadius: 1
            }]
        },
        options: {
            plugins: {
                legend: {
                    display: false // Вимкнути легенду
                },
                tooltip: {
                    enabled: false // Вимкнути вспливаючі підказки
                }
            },
            responsive: true, // Зробити графік адаптивним
            scales: {
                x: {
                    display: false // Приховати вісь X
                },
                y: {
                    beginAtZero: true
                }
            }
        }
    });
</script>
</body>
</html>
